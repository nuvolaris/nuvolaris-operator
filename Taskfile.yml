# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
version: '3'

vars:
  G: ""
  N: ""
  T: ""
  S: ""
  BASETAG: 0.3.0-morpheus
  KUBE:
    sh: ./detect.sh

dotenv:
  - .env

includes:
  d:
    taskfile: TaskfileDev.yml
  t: 
    taskfile: TaskfileTest.yml
  b: 
    taskfile: TaskfileBuild.yml
  kind:
    taskfile: clusters/kind.yml
    dir: clusters
  eks:
    taskfile: clusters/eks.yml
    dir: clusters
  aks:
    taskfile: clusters/aks.yml
    dir: clusters
  lks:  
    taskfile: clusters/lks.yml
    dir: clusters
  gke:
    taskfile: clusters/gke.yml
    dir: clusters
  osh: 
    taskfile: clusters/openshift.yml
    dir: clusters
  m8s:
    taskfile: clusters/microk8s.yml
    dir: clusters

tasks:

  default: 
    - task: use

  setup:
    deps:
      - update-files-from-openwhisk
      - ssh-key
      - configure-env
    cmds:
      - poetry install
    status:
      - test -e $GOBIN/kopf

  env: env
  
  watch: watch kubectl -n nuvolaris get node,deploy,pod,service,cronjob 

  logs: kubectl -n nuvolaris logs po/nuvolaris-operator -f
 
  cli: 
    - task: d:cli

  ecli:
    - task: d:ecli

  run:
    - task: d:run

  permission:
    - task: t:permission

  operator:
    - task: t:operator

  instance:
    - task: d:instance

  destroy: 
    - task: d:destroy

  mongo: 
    - task: t:mongo    

  nuv:
    - task: kind:config
    - nuv setup --context=kind-nuvolaris --apihost=auto --image-tag={{.TAG}}

  all:
    - task: permission
    - task: operator
    - task: instance
    - task: config
    - task: hello
    - task: ping
    - task: mongo

  config:
    - task: t:config

  hello: 
    - task: t:hello

  ping: 
    - task: t:ping

  defin:
    - task: d:defin

  image-tag: 
    - git tag -d $(git tag) 
    - git tag -f {{.BASETAG}}.$(date +%y%m%d%H){{.S}}
    - env PAGER= git tag

  # configure env
  configure-env:
    cmds:
      - echo "please copy .env.dist in .env and add the keys"
    status:
      - test -f .env

  # update configuration files from openwhisk source
  update-files-from-openwhisk: 
    cmds:
      - | 
        if test -d ../nuvolaris-controller
        then cp -v ../nuvolaris-controller/openwhisk/ansible/files/*.json nuvolaris/files
        else echo "not found ../nuvolaris-controller/openwhisk"
        fi
    status:
      - test -f nuvolaris/files/runtimes.json

  # generate ssh keys
  ssh-key:
    cmds:
      - ssh-keygen -b 2048 -t rsa -f clusters/id_rsa -q -N ""
      - ssh-keygen  -y -f clusters/id_rsa >clusters/id_rsa.pub
    status:
      - test -f clusters/id_rsa.pub

  clean:
    cmds:
      - cmd: kubectl -n nuvolaris delete wsk/controller
        ignore_error: true
      - cmd: kubectl -n nuvolaris delete all --all
        ignore_error: true
      - cmd: kubectl -n nuvolaris delete pvc --all
        ignore_error: true
      - cmd: kubectl -n nuvolaris delete ing --all
        ignore_error: true
      - cmd: kubectl -n nuvolaris delete deployments --all
        ignore_error: true        

  utest:
    cmds:
      - |
        for test in nuvolaris/{{.T}}*.py
        do  echo "*** [{{.KUBE}}] $test"
            poetry run python3 -m doctest $test {{.CLI_ARGS}}
        done
    silent: true

  iclean: rm -f deploy/*/kustomization.yaml deploy/*/__*

  itest: 
    cmds:
      - task: iclean
      - kubectl apply -f deploy/nuvolaris-permissions
      - |
        for test in tests/{{.T}}*.ipy tests/{{.KUBE}}/{{.T}}*.ipy
        do  
            if test -e "$test"
            then  echo "*** [{{.KUBE}}] $test"
                  env OPERATOR_IMAGE=${MY_OPERATOR_IMAGE:-OPERATOR_IMAGE} poetry run ipython $test {{.CLI_ARGS}}
            fi
        done
    silent: true
    env:
       # taken from the tag
      OPERATOR_TAG:
        sh: git describe --tags --abbrev=0 2>/dev/null || git rev-parse --short HEAD
      # taken from the Dockerfile - ovverdable with MY_OPERATOR_IMAGE
      OPERATOR_IMAGE:
        sh: awk -F= '/ARG OPERATOR_IMAGE_DEFAULT=/ { print $2 ; exit }' Dockerfile
      # taken from the Dockerfile 
      CONTROLLER_IMAGE:
        sh: awk -F= '/ENV CONTROLLER_IMAGE=/ { print $2 ; exit }' Dockerfile
      CONTROLLER_TAG:
        sh: awk -F= '/ENV CONTROLLER_TAG=/ { print $2 ; exit }' Dockerfile


  dtest:
    - task: permission
    - task: operator
    - task: instance
    - task: actions

  actions:
    - task: t:config
    - task: t:hello
    - task: t:ping
    - task: t:echo
    - task: t:api

  test:
    - task: clean
    - task: utest
    - task: itest
    - task: dtest

  debug: 
    - poetry run ipython profile create
    - cp test_profile.ipy ~/.ipython/profile_default/startup/
    - task: uitest

  all-kubes: 
    cmds: 
      - |-
        if test -z "{{.CLI_ARGS}}"
        then echo 'use "task all-kubes -- <target> runs the target against all the available kubes'
        else  for cfg in clusters/*.kubeconfig
              do  /usr/games/cowsay -f duck  $(basename $cfg .kubeconfig) 2>/dev/null
                  cp -v $cfg ~/.kube/config >/dev/null
                  task {{.CLI_ARGS}}
              done
        fi
    silent: true

  kube-test: 
    cmds:
      - task dtest 2>/dev/null >/dev/null

  use: 
    cmds:
    - |-
        if test -z "{{.N}}"
        then  echo "*** current: {{.KUBE}}"
              ls clusters/*.kubeconfig | sort | awk '{ print NR, $0 }'
              echo "*** select with 'task #'"
        else  CFG="$(ls -1 clusters/*.kubeconfig | tail +{{.N}} | head -1)" 
              cp $CFG ~/.kube/config
              echo "cluster: $(./detect.sh)"
              kubectl get nodes
        fi
    silent: true

  build-and-load:
    - task: b:build-and-load

  build-and-push:
    - task: b:build-and-push

  buildx-and-push:
    - task: b:buildx-and-push

  1: task use N=1
  2: task use N=2
  3: task use N=3
  4: task use N=4
  5: task use N=5
  6: task use N=6
  7: task use N=7
  8: task use N=8
  9: task use N=9

